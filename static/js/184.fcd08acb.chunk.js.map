{"version":3,"file":"static/js/184.fcd08acb.chunk.js","mappings":"2RAOaA,EAAa,WACtB,OAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAQJ,EAAaK,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WAAM,wCAIf,2FACGR,GAAU,GADb,mBAGiCS,EAAAA,EAAAA,IAAqBH,GAHtD,OAGcI,EAHd,OAKQZ,EAAiBY,GALzB,yEASOV,GAAU,GATjB,6EAJe,sBACE,OAAVM,GADQ,mCAgBfK,KACE,CAACL,IAYJ,OACI,gCACKP,IAAU,SAAC,KAAD,KACX,0BACI,mBAAQa,UAAU,YAAlB,UACI,kBAAMA,UAAU,OAAOC,SAflB,SAAAC,GACjBA,EAAEC,iBACFZ,EAAgB,CAAEG,MAAOQ,EAAEE,cAAcC,SAASX,MAAMY,QAEJ,KAAhDJ,EAAEE,cAAcC,SAASX,MAAMY,MAAMC,QACrCC,MAAM,qIAUE,WAEQ,mBAAQC,KAAK,SAAST,UAAU,SAAhC,UACI,iBAAMA,UAAU,eAAhB,uBAGZ,kBACIA,UAAU,QACVS,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,iBAKhB5B,EAAc6B,OAAS,IACxB,wBACK7B,EAAc8B,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAN,OACf,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAACC,KAAM5B,GAAzC,SAAqDyB,KADhDD,a,yMClE7BK,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAe,mCAAG,oGACJF,IAAAA,IAAA,uCAA0CC,IADtC,cACrBE,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAKfC,EAAgB,mCAAG,WAAOX,GAAP,uFACLK,IAAAA,IAAA,iBAAoBL,EAApB,oBAAkCM,IAD7B,cACtBE,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAIhBG,EAAoB,mCAAG,WAAOZ,GAAP,uFACTK,IAAAA,IAAA,iBAAoBL,EAApB,4BAA0CM,IADjC,cAC1BE,EAD0B,yBAEzBA,EAASC,KAAKI,MAFW,2CAAH,sDAIpBC,EAAuB,mCAAG,WAAOd,GAAP,uFACZK,IAAAA,IAAA,iBAAoBL,EAApB,4BAA0CM,IAD9B,cAC7BE,EAD6B,yBAE5BA,EAASC,KAAKC,SAFc,2CAAH,sDAIvB7B,EAAoB,mCAAG,WAAOkC,GAAP,uFACTV,IAAAA,IAAA,gCAAmCC,EAAnC,kBAAgDS,IADvC,cAC1BP,EAD0B,yBAEzBA,EAASC,KAAKC,SAFW,2CAAH","sources":["components/MoviesPage/MoviesPage.jsx","services/publicationsApi.js"],"sourcesContent":["import  {useState, useEffect} from \"react\";\nimport { getSearchPublication } from \"services/publicationsApi\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { TailSpin } from  'react-loader-spinner'\n\n\n\nexport const MoviesPage = () => {  \n    const [searchkinchik, setSearchkinchik] = useState([])\n    const [isLoad, setIsLoad] = useState(false)\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n    const query = searchParams.get('query')\n\n    useEffect(() => {\n        if (query === null) {\n            return;\n        }\n     async function FetchSearch () {\n        setIsLoad(true);\n         try {\n             const cardSearch = await getSearchPublication(query)\n             \n             setSearchkinchik(cardSearch)\n         } catch (error) {\n             \n         } finally {\n            setIsLoad(false)\n          } \n     }\n     FetchSearch();\n    }, [query])\n       \n    const hendleSubmit = e => {\n        e.preventDefault();\n        setSearchParams({ query: e.currentTarget.elements.query.value });\n\n        if (e.currentTarget.elements.query.value.trim() === '') {\n            alert('введите название фильма')\n            return;            \n        }\n    }\n   \n    return ( \n        <>\n            {isLoad && <TailSpin />}\n            <div>\n                <header className=\"searchbar\">\n                    <form className=\"form\" onSubmit={hendleSubmit}>\n                        \n                            <button type=\"submit\" className=\"button\" >\n                                <span className=\"button-label\">Search</span>\n                            </button>\n                                            \n                    <input                        \n                        className=\"input\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search movies\"                        \n                        name=\"query\"\n                    />\n                    </form>\n                </header>\n            </div>\n            {searchkinchik.length > 0 && (\n            <ul>\n                {searchkinchik.map(({id, title}) => (\n                    <li key={id}>\n                        <Link to={`/movies/${id}`} state={{from: location}}>{title}</Link>\n                    </li>\n                ))}\n            </ul>\n            )}           \n        </>\n    )\n}","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\nconst key = 'f8fb1aa4ecd91eaa841106c5d2d7056f';\n\nexport const getPublications = async () => {\n    const response = await axios.get(`/trending/movie/week?api_key=${key}`);    \n    return response.data.results;\n    \n}\nexport const getPublicationId = async (id) => {\n    const response = await axios.get(`/movie/${id}?api_key=${key}`);\n    return response.data;\n}\nexport const getPublicationCastId = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits?api_key=${key}`);\n    return response.data.cast;\n}\nexport const getPublicationReviewsId = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${key}`);\n    return response.data.results;\n}\nexport const getSearchPublication = async (searchMovie) => {\n    const response = await axios.get(`/search/movie?api_key=${key}&query=${searchMovie}`);\n    return response.data.results;\n}\n"],"names":["MoviesPage","useState","searchkinchik","setSearchkinchik","isLoad","setIsLoad","useSearchParams","searchParams","setSearchParams","location","useLocation","query","get","useEffect","getSearchPublication","cardSearch","FetchSearch","className","onSubmit","e","preventDefault","currentTarget","elements","value","trim","alert","type","autoComplete","autoFocus","placeholder","name","length","map","id","title","to","state","from","axios","key","getPublications","response","data","results","getPublicationId","getPublicationCastId","cast","getPublicationReviewsId","searchMovie"],"sourceRoot":""}